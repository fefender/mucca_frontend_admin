{"ast":null,"code":"import _classCallCheck from \"/home/fefe/Develop/mucca-project/mucca_frontend_admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fefe/Develop/mucca-project/mucca_frontend_admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/fefe/Develop/mucca-project/mucca_frontend_admin/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/fefe/Develop/mucca-project/mucca_frontend_admin/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/fefe/Develop/mucca-project/mucca_frontend_admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/fefe/Develop/mucca-project/mucca_frontend_admin/src/Components/Sections/AllStatusViewer.jsx\";\nimport React, { Component } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport Api from \"../../api\";\nimport { Header, Icon, Container, Button, Modal, Label, Accordion, Grid, Segment, Transition, Form, Radio, Card, Table } from \"semantic-ui-react\";\nvar api = new Api();\nvar cookies = new Cookies();\n\nvar AllStatusViewer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AllStatusViewer, _Component);\n\n  function AllStatusViewer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AllStatusViewer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AllStatusViewer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      group: _this.props.group,\n      environment: cookies.get(\"userEnv\"),\n      core: \"\",\n      coreEventConsumer: \"\",\n      mpkg: \"\",\n      dependencies: \"\",\n      reverseproxy: \"\",\n      storage: \"\",\n      loaded: false\n    };\n\n    _this.triggerResponse = function (res) {\n      console.log(res);\n\n      if (res && res.status === 200) {\n        _this.setState({\n          core: res.data.data.core,\n          coreEventConsumer: res.data.data.coreEventConsumer,\n          mpkg: res.data.data.mpkg,\n          dependencies: res.data.data.dependencies,\n          reverseproxy: res.data.data.reverseproxy,\n          storage: res.data.data.storage,\n          loaded: true\n        });\n      }\n    };\n\n    _this.genericSetter = function (data) {\n      var content = [];\n\n      for (var x in data) {\n        var rowTitle = React.createElement(Table.Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, data[x].name), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, data[x].status));\n        content.push(rowTitle);\n      }\n\n      return React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Service Name\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Status\"))), content.map(function (value, ind) {\n        return React.createElement(Table.Body, {\n          key: ind,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, value);\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(AllStatusViewer, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h3\",\n        color: \"violet\",\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Application Status\"), React.createElement(Segment, {\n        color: \"violet\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        columns: \"equal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h4\",\n        color: \"violet\",\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Core\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, this.state.loaded && this.genericSetter(this.state.core)), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.state.loaded && this.genericSetter(this.state.coreEventConsumer))))));\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      api.trigger(this.state.environment, \"status\", this.triggerResponse);\n    }\n  }]);\n\n  return AllStatusViewer;\n}(Component);\n\nexport default AllStatusViewer;","map":{"version":3,"sources":["/home/fefe/Develop/mucca-project/mucca_frontend_admin/src/Components/Sections/AllStatusViewer.jsx"],"names":["React","Component","Cookies","Api","Header","Icon","Container","Button","Modal","Label","Accordion","Grid","Segment","Transition","Form","Radio","Card","Table","api","cookies","AllStatusViewer","state","group","props","environment","get","core","coreEventConsumer","mpkg","dependencies","reverseproxy","storage","loaded","triggerResponse","res","console","log","status","setState","data","genericSetter","content","x","rowTitle","name","push","map","value","ind","trigger"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport Api from \"../../api\";\nimport {\n  Header,\n  Icon,\n  Container,\n  Button,\n  Modal,\n  Label,\n  Accordion,\n  Grid,\n  Segment,\n  Transition,\n  Form,\n  Radio,\n  Card,\n  Table\n} from \"semantic-ui-react\";\n\nconst api = new Api();\nconst cookies = new Cookies();\n\nclass AllStatusViewer extends Component {\n  state = {\n    group: this.props.group,\n    environment: cookies.get(\"userEnv\"),\n    core: \"\",\n    coreEventConsumer: \"\",\n    mpkg: \"\",\n    dependencies: \"\",\n    reverseproxy: \"\",\n    storage: \"\",\n    loaded: false\n  };\n\n  triggerResponse = res => {\n    console.log(res);\n    if (res && res.status === 200) {\n      this.setState({\n        core: res.data.data.core,\n        coreEventConsumer: res.data.data.coreEventConsumer,\n        mpkg: res.data.data.mpkg,\n        dependencies: res.data.data.dependencies,\n        reverseproxy: res.data.data.reverseproxy,\n        storage: res.data.data.storage,\n        loaded: true\n      });\n    }\n  };\n\n  genericSetter = data => {\n    const content = [];\n    for (let x in data) {\n      let rowTitle = (\n        <Table.Row>\n          <Table.Cell>{data[x].name}</Table.Cell>\n          <Table.Cell>{data[x].status}</Table.Cell>\n          {/* <Table.Cell>\n            <Icon name=\"checkmark\" />\n          </Table.Cell> */}\n        </Table.Row>\n      );\n      content.push(rowTitle);\n    }\n    return (\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Service Name</Table.HeaderCell>\n            <Table.HeaderCell>Status</Table.HeaderCell>\n            {/* <Table.HeaderCell>Status</Table.HeaderCell> */}\n          </Table.Row>\n        </Table.Header>\n        {content.map((value, ind) => (\n          <Table.Body key={ind}>{value}</Table.Body>\n        ))}\n      </Table>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <Header as=\"h3\" color=\"violet\" textAlign=\"center\">\n          Application Status\n        </Header>\n        <Segment color=\"violet\">\n          <Grid columns=\"equal\">\n            <Grid.Row>\n              <Grid.Column>\n                <Header as=\"h4\" color=\"violet\" textAlign=\"center\">\n                  Core\n                </Header>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                {/* <Header as=\"h4\" color=\"violet\" textAlign=\"center\">\n                  Core\n                </Header> */}\n                {this.state.loaded && this.genericSetter(this.state.core)}\n              </Grid.Column>\n\n              <Grid.Column>\n                {/* <Header as=\"h4\" color=\"violet\" textAlign=\"center\">\n                  Core Event Consumer\n                </Header> */}\n                {this.state.loaded &&\n                  this.genericSetter(this.state.coreEventConsumer)}\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n      </div>\n    );\n  }\n  componentWillMount() {\n    api.trigger(this.state.environment, \"status\", this.triggerResponse);\n  }\n}\n\nexport default AllStatusViewer;\n"]},"metadata":{},"sourceType":"module"}