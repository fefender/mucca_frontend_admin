{"ast":null,"code":"import _classCallCheck from \"/home/fefe/Develop/mucca-project/mucca_frontend_admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n// *******************Note*******************************\n// ##service: microservizio da chiamare\n// ##dataToPost: dati da inserire nel body della richiesta\n// (deve essere precedentemente formattato e passato come oggetto {})\n// ##query: da passare come null se la read è semplice, preformattata\n// come oggetto per essere passata direttamente se composta(ad es skip/limit/fields/filtri)\n// ##callback:funzione che nel componente da cui chiamo l'api gestirà la risposta per fornirla\n// al render\nimport Cookies from \"universal-cookie\";\nimport axios from \"axios\";\nvar cookies = new Cookies();\nexport var Api = function Api() {\n  _classCallCheck(this, Api);\n\n  this.getCookies = function (callback) {\n    var userToken = Promise.resolve(cookies.get(\"userToken\"));\n    var userKey = Promise.resolve(cookies.get(\"userKey\"));\n    Promise.all([userToken, userKey]).then(function (result) {\n      var gotToken = result[0];\n      var gotKey = result[1];\n\n      if (gotToken && gotKey) {\n        var headers = [gotToken, gotKey];\n        return callback(headers);\n      } else {\n        return callback(undefined);\n      }\n    });\n  };\n\n  this.create = function (env, query, subject, dataToPost, callback) {\n    var userToken = Promise.resolve(cookies.get(\"userToken\"));\n    var userKey = Promise.resolve(cookies.get(\"userKey\"));\n    var userEnv = Promise.resolve(cookies.get(\"userEnv\"));\n    var url = process.env.REACT_APP_SERV_URL;\n    var version = process.env.REACT_APP_VERSION;\n    var action = process.env.REACT_APP_ACTION_C;\n    var fullPath = url + \"/\" + version + \"/\" + action + \"/\" + env + \"/\" + query + \"/\" + subject;\n    Promise.all([userToken, userKey]).then(function (result) {\n      var gotToken = result[0];\n      var gotKey = result[1];\n\n      if (gotToken && gotKey) {\n        var headers = {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          token: gotToken,\n          key: gotKey\n        };\n        return headers;\n      }\n    }).then(function (res) {\n      axios({\n        method: \"post\",\n        url: fullPath,\n        headers: res,\n        data: dataToPost\n      }).then(function (res) {\n        return callback(res);\n      }).catch(function (error) {\n        console.log(\"error in api\", error);\n        return callback(error.response);\n      });\n    });\n  };\n\n  this.update = function (dataToPost, callback) {\n    var userToken = Promise.resolve(cookies.get(\"userToken\"));\n    var userKey = Promise.resolve(cookies.get(\"userKey\"));\n    var userEnv = Promise.resolve(cookies.get(\"userEnv\"));\n    var url = process.env.REACT_APP_SERV_URL;\n    var version = process.env.REACT_APP_VERSION;\n    var action = process.env.REACT_APP_ACTION_U;\n    var fullPath = url + \"/\" + version + \"/\" + action + \"/\" + userEnv;\n    Promise.all([userToken, userKey]).then(function (result) {\n      var gotToken = result[0];\n      var gotKey = result[1];\n\n      if (gotToken && gotKey) {\n        var headers = {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          token: gotToken,\n          key: gotKey\n        };\n        return headers;\n      }\n    }).then(function (res) {\n      axios({\n        method: \"post\",\n        url: fullPath,\n        headers: res,\n        data: dataToPost\n      }).then(function (res) {\n        return callback(res);\n      }).catch(function (error) {\n        console.log(\"error in api\", error);\n        return callback(error.response);\n      });\n    });\n  };\n\n  this.delete = function (service, id, callback) {\n    var userToken = Promise.resolve(cookies.get(\"userToken\"));\n    var userKey = Promise.resolve(cookies.get(\"userKey\"));\n    var userEnv = Promise.resolve(cookies.get(\"userEnv\"));\n    var url = process.env.REACT_APP_SERV_URL;\n    var version = process.env.REACT_APP_VERSION;\n    var action = process.env.REACT_APP_ACTION_D;\n    var fullPath = url + \"/\" + version + \"/\" + action + \"/\" + userEnv;\n    Promise.all([userToken, userKey]).then(function (result) {\n      var gotToken = result[0];\n      var gotKey = result[1];\n\n      if (gotToken && gotKey) {\n        var headers = {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          token: gotToken,\n          key: gotKey\n        };\n        return headers;\n      }\n    }).then(function (res) {\n      axios({\n        method: \"post\",\n        url: fullPath,\n        headers: res\n      }).then(function (res) {\n        return callback(res);\n      }).catch(function (error) {\n        console.log(\"error in api\", error);\n        return callback(error.response);\n      });\n    });\n  };\n\n  this.read = function (env, query, callback) {\n    var userToken = Promise.resolve(cookies.get(\"userToken\"));\n    var userKey = Promise.resolve(cookies.get(\"userKey\"));\n    var userEnv = Promise.resolve(cookies.get(\"userEnv\"));\n    var url = process.env.REACT_APP_SERV_URL;\n    var version = process.env.REACT_APP_VERSION;\n    var action = process.env.REACT_APP_ACTION_R;\n    var fullPath = url + \"/\" + version + \"/\" + action + \"/\" + env + \"/\" + query;\n    Promise.all([userToken, userKey]).then(function (result) {\n      var gotToken = result[0];\n      var gotKey = result[1];\n\n      if (gotToken && gotKey) {\n        var headers = {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          token: gotToken,\n          key: gotKey\n        };\n        return headers;\n      }\n    }).then(function (res) {\n      axios({\n        method: \"get\",\n        url: fullPath,\n        headers: res\n      }).then(function (res) {\n        return callback(res);\n      }).catch(function (error) {\n        return callback(error.response);\n      });\n    });\n  };\n\n  this.authentication = function (dataToPost, callback) {\n    var url = process.env.REACT_APP_SERV_URL;\n    var version = process.env.REACT_APP_VERSION;\n    var action = process.env.REACT_APP_ACTION_AUTH;\n    var fullPath = url + \"/\" + version + \"/\" + action;\n    axios({\n      method: \"post\",\n      url: fullPath,\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      data: dataToPost\n    }).then(function (res) {\n      return callback(res);\n    }).catch(function (error) {\n      console.log(\"error in api\", error);\n      return callback(error.response);\n    });\n  };\n\n  this.authorization = function (callback) {\n    var url = process.env.REACT_APP_SERV_URL;\n    var version = process.env.REACT_APP_VERSION;\n    var action = process.env.REACT_APP_ACTION_AUTHO;\n    var fullPath = url + \"/\" + version + \"/\" + action;\n    var userToken = Promise.resolve(cookies.get(\"userToken\"));\n    var userKey = Promise.resolve(cookies.get(\"userKey\"));\n    Promise.all([userToken, userKey]).then(function (result) {\n      var gotToken = result[0];\n      var gotKey = result[1];\n\n      if (gotToken && gotKey) {\n        var headers = {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          token: gotToken,\n          key: gotKey\n        };\n        return headers;\n      }\n    }).then(function (res) {\n      axios({\n        method: \"get\",\n        url: fullPath,\n        headers: res\n      }).then(function (res) {\n        return callback(res);\n      }).catch(function (error) {\n        console.log(\"error in api\", error);\n        return callback(error.response);\n      });\n    });\n  };\n\n  this.logout = function (callback) {\n    var url = process.env.REACT_APP_SERV_URL;\n    var version = process.env.REACT_APP_VERSION;\n    var action = process.env.REACT_APP_ACTION_LOGOUT;\n    var fullPath = url + \"/\" + version + \"/\" + action;\n    var userToken = Promise.resolve(cookies.get(\"userToken\"));\n    var userKey = Promise.resolve(cookies.get(\"userKey\"));\n    Promise.all([userToken, userKey]).then(function (result) {\n      var gotToken = result[0];\n      var gotKey = result[1];\n\n      if (gotToken && gotKey) {\n        var headers = {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          token: gotToken,\n          key: gotKey\n        };\n        return headers;\n      }\n    }).then(function (res) {\n      axios({\n        method: \"get\",\n        url: fullPath,\n        headers: res\n      }).then(function (res) {\n        return callback(res);\n      }).catch(function (error) {\n        console.log(\"error in api\", error);\n        return callback(error.response);\n      });\n    });\n  };\n};\nexport default Api;","map":{"version":3,"sources":["/home/fefe/Develop/mucca-project/mucca_frontend_admin/src/api.js"],"names":["Cookies","axios","cookies","Api","getCookies","callback","userToken","Promise","resolve","get","userKey","all","then","result","gotToken","gotKey","headers","undefined","create","env","query","subject","dataToPost","userEnv","url","process","REACT_APP_SERV_URL","version","REACT_APP_VERSION","action","REACT_APP_ACTION_C","fullPath","token","key","res","method","data","catch","error","console","log","response","update","REACT_APP_ACTION_U","delete","service","id","REACT_APP_ACTION_D","read","REACT_APP_ACTION_R","authentication","REACT_APP_ACTION_AUTH","authorization","REACT_APP_ACTION_AUTHO","logout","REACT_APP_ACTION_LOGOUT"],"mappings":"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","sourcesContent":["// *******************Note*******************************\n// ##service: microservizio da chiamare\n// ##dataToPost: dati da inserire nel body della richiesta\n// (deve essere precedentemente formattato e passato come oggetto {})\n// ##query: da passare come null se la read è semplice, preformattata\n// come oggetto per essere passata direttamente se composta(ad es skip/limit/fields/filtri)\n// ##callback:funzione che nel componente da cui chiamo l'api gestirà la risposta per fornirla\n// al render\nimport Cookies from \"universal-cookie\";\nimport axios from \"axios\";\n\nlet cookies = new Cookies();\n\nexport class Api {\n  getCookies = callback => {\n    let userToken = Promise.resolve(cookies.get(\"userToken\"));\n    let userKey = Promise.resolve(cookies.get(\"userKey\"));\n    Promise.all([userToken, userKey]).then(function(result) {\n      let gotToken = result[0];\n      let gotKey = result[1];\n      if (gotToken && gotKey) {\n        let headers = [gotToken, gotKey];\n        return callback(headers);\n      } else {\n        return callback(undefined);\n      }\n    });\n  };\n\n  create = (env, query, subject, dataToPost, callback) => {\n    let userToken = Promise.resolve(cookies.get(\"userToken\"));\n    let userKey = Promise.resolve(cookies.get(\"userKey\"));\n    let userEnv = Promise.resolve(cookies.get(\"userEnv\"));\n    let url = process.env.REACT_APP_SERV_URL;\n    let version = process.env.REACT_APP_VERSION;\n    let action = process.env.REACT_APP_ACTION_C;\n    let fullPath =\n      url +\n      \"/\" +\n      version +\n      \"/\" +\n      action +\n      \"/\" +\n      env +\n      \"/\" +\n      query +\n      \"/\" +\n      subject;\n    Promise.all([userToken, userKey])\n      .then(function(result) {\n        let gotToken = result[0];\n        let gotKey = result[1];\n        if (gotToken && gotKey) {\n          let headers = {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            token: gotToken,\n            key: gotKey\n          };\n          return headers;\n        }\n      })\n      .then(res => {\n        axios({\n          method: \"post\",\n          url: fullPath,\n          headers: res,\n          data: dataToPost\n        })\n          .then(res => {\n            return callback(res);\n          })\n          .catch(function(error) {\n            console.log(\"error in api\", error);\n            return callback(error.response);\n          });\n      });\n  };\n\n  update = (dataToPost, callback) => {\n    let userToken = Promise.resolve(cookies.get(\"userToken\"));\n    let userKey = Promise.resolve(cookies.get(\"userKey\"));\n    let userEnv = Promise.resolve(cookies.get(\"userEnv\"));\n    let url = process.env.REACT_APP_SERV_URL;\n    let version = process.env.REACT_APP_VERSION;\n    let action = process.env.REACT_APP_ACTION_U;\n    let fullPath = url + \"/\" + version + \"/\" + action + \"/\" + userEnv;\n\n    Promise.all([userToken, userKey])\n      .then(function(result) {\n        let gotToken = result[0];\n        let gotKey = result[1];\n        if (gotToken && gotKey) {\n          let headers = {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            token: gotToken,\n            key: gotKey\n          };\n          return headers;\n        }\n      })\n      .then(res => {\n        axios({\n          method: \"post\",\n          url: fullPath,\n          headers: res,\n          data: dataToPost\n        })\n          .then(res => {\n            return callback(res);\n          })\n          .catch(function(error) {\n            console.log(\"error in api\", error);\n            return callback(error.response);\n          });\n      });\n  };\n\n  delete = (service, id, callback) => {\n    let userToken = Promise.resolve(cookies.get(\"userToken\"));\n    let userKey = Promise.resolve(cookies.get(\"userKey\"));\n    let userEnv = Promise.resolve(cookies.get(\"userEnv\"));\n    let url = process.env.REACT_APP_SERV_URL;\n    let version = process.env.REACT_APP_VERSION;\n    let action = process.env.REACT_APP_ACTION_D;\n    let fullPath = url + \"/\" + version + \"/\" + action + \"/\" + userEnv;\n\n    Promise.all([userToken, userKey])\n      .then(function(result) {\n        let gotToken = result[0];\n        let gotKey = result[1];\n        if (gotToken && gotKey) {\n          let headers = {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            token: gotToken,\n            key: gotKey\n          };\n          return headers;\n        }\n      })\n      .then(res => {\n        axios({\n          method: \"post\",\n          url: fullPath,\n          headers: res\n        })\n          .then(res => {\n            return callback(res);\n          })\n          .catch(function(error) {\n            console.log(\"error in api\", error);\n            return callback(error.response);\n          });\n      });\n  };\n\n  read = (env, query, callback) => {\n    let userToken = Promise.resolve(cookies.get(\"userToken\"));\n    let userKey = Promise.resolve(cookies.get(\"userKey\"));\n    let userEnv = Promise.resolve(cookies.get(\"userEnv\"));\n    let url = process.env.REACT_APP_SERV_URL;\n    let version = process.env.REACT_APP_VERSION;\n    let action = process.env.REACT_APP_ACTION_R;\n    let fullPath = url + \"/\" + version + \"/\" + action + \"/\" + env + \"/\" + query;\n    Promise.all([userToken, userKey])\n      .then(function(result) {\n        let gotToken = result[0];\n        let gotKey = result[1];\n        if (gotToken && gotKey) {\n          let headers = {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            token: gotToken,\n            key: gotKey\n          };\n          return headers;\n        }\n      })\n      .then(res => {\n        axios({\n          method: \"get\",\n          url: fullPath,\n          headers: res\n        })\n          .then(res => {\n            return callback(res);\n          })\n          .catch(function(error) {\n            return callback(error.response);\n          });\n      });\n  };\n\n  authentication = (dataToPost, callback) => {\n    let url = process.env.REACT_APP_SERV_URL;\n    let version = process.env.REACT_APP_VERSION;\n\n    let action = process.env.REACT_APP_ACTION_AUTH;\n    let fullPath = url + \"/\" + version + \"/\" + action;\n    axios({\n      method: \"post\",\n      url: fullPath,\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      data: dataToPost\n    })\n      .then(res => {\n        return callback(res);\n      })\n      .catch(function(error) {\n        console.log(\"error in api\", error);\n        return callback(error.response);\n      });\n  };\n\n  authorization = callback => {\n    let url = process.env.REACT_APP_SERV_URL;\n    let version = process.env.REACT_APP_VERSION;\n\n    let action = process.env.REACT_APP_ACTION_AUTHO;\n    let fullPath = url + \"/\" + version + \"/\" + action;\n    let userToken = Promise.resolve(cookies.get(\"userToken\"));\n    let userKey = Promise.resolve(cookies.get(\"userKey\"));\n    Promise.all([userToken, userKey])\n      .then(function(result) {\n        let gotToken = result[0];\n        let gotKey = result[1];\n        if (gotToken && gotKey) {\n          let headers = {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            token: gotToken,\n            key: gotKey\n          };\n          return headers;\n        }\n      })\n      .then(res => {\n        axios({\n          method: \"get\",\n          url: fullPath,\n          headers: res\n        })\n          .then(res => {\n            return callback(res);\n          })\n          .catch(function(error) {\n            console.log(\"error in api\", error);\n            return callback(error.response);\n          });\n      });\n  };\n\n  logout = callback => {\n    let url = process.env.REACT_APP_SERV_URL;\n    let version = process.env.REACT_APP_VERSION;\n\n    let action = process.env.REACT_APP_ACTION_LOGOUT;\n    let fullPath = url + \"/\" + version + \"/\" + action;\n    let userToken = Promise.resolve(cookies.get(\"userToken\"));\n    let userKey = Promise.resolve(cookies.get(\"userKey\"));\n    Promise.all([userToken, userKey])\n      .then(function(result) {\n        let gotToken = result[0];\n        let gotKey = result[1];\n        if (gotToken && gotKey) {\n          let headers = {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            token: gotToken,\n            key: gotKey\n          };\n          return headers;\n        }\n      })\n      .then(res => {\n        axios({\n          method: \"get\",\n          url: fullPath,\n          headers: res\n        })\n          .then(res => {\n            return callback(res);\n          })\n          .catch(function(error) {\n            console.log(\"error in api\", error);\n            return callback(error.response);\n          });\n      });\n  };\n}\n\nexport default Api;\n"]},"metadata":{},"sourceType":"module"}